1/a
modifier lannotation de cle primaire 
@ORM\GeneratedValue(strategy="NONE")

1/b 
lentity manager est interface entre le code et le base de donnees il effectue des opérations de persistance, de récupération : exemples getRepository() et persist()
2-a

les etapes pour relation:
commande : php bin/console create entity Film 
(pour modifier la tables existante)
ajouter propriete category 
on choisit relation OneToMany .
indiquer la classe Category pour la relation 
et indiquer oui pour creer lattribut films dans la class Category 


2-b 
2)b)
[1]
ManyToOne(targetEntity: Category::class, mappedBy: 'films')
[2]
private $category;
[3]
OneToMnay(targetEntity: Film::class)
[4]
private Collection $films;



3-
#[Route('/nvFilm, name: nvFilm)]
public function addFilm(Request $request , FilmRepository $filmRepository)
    {
        $film = new Film();

        $form = $this->createForm(FilmType::class, $film);

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
$film->setViews(0);
$filmRepository->save($film,true);

            return $this->redirectToRoute('film_list');
        }

        return $this->render('film/add.html.twig', [
            'form' => $form->createView(),
        ]);
    }



4- attribut de type Category cannot be converted to string car le form add le categorie sans type , passe string par defaut qui il nest pas etre categorye 

-b
i faut indiquer le type EntityType 

->add(category, EntityType::class, [
    'class' => Category::class,
'choice_label' => name,

]);


5.a


#[Route('/films, name: films)]
public function listFilms(FilmRepository $filmRepository)
{
    $films = $filmRepository->findAll();

    return $this->render('film/list.html.twig', [
        'films' => $films,
    ]);
}

5-b 
[1] : #[Route('/getFilm/{id}, name: ‘getFilm')]
public function showFilm(ManagerRegistry $MR, FilmRepository $repo, $id): Response
{
    $entityManager = $MR->getManager();
    $film = $repo->find($id);

    if ($film) {
        $film->setViews($film->getViews() + 1);
        $entityManager->flush();
    }

    return $this->render('film/show.html.twig', [
        'film' => $film,
    ]);
}

5)c)        return $this->redirectToRoute('film_list');


7-

public function getFilmByCat($id)
{
    return $this->createQueryBuilder('f')
        ->leftJoin('f.category', 'c')
        ->andWhere('c.id = :categoryId')
        ->setParameter('categoryId', $id)
        ->getQuery()
        ->getResult();
}





8-
public function getFilmsnbViews()
{
    return $this->createQueryBuilder('f')
        ->where('f.views > :views')
        ->setParameter('views', 100)
        ->getQuery()
        ->getResult();
}

6- 
{% if films is not empty %} 
{% set mostViewedFilm = films[0] %}
 {% for film in films %} 
	{% if film.views > mostViewedFilm.views %}
 	{% set mostViewedFilm = film %}
 	{% endif %}
 {% endfor %}
 <h2>Most Viewed Film:</h2>
 <p>Title: {{ mostViewedFilm.title }}</p> 
<p>Description: {{ mostViewedFilm.description }}</p>
 {% else %} 
<p>No films found.</p>
 {% endif %}
